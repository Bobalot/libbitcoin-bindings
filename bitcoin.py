# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_bitcoin', [dirname(__file__)])
        except ImportError:
            import _bitcoin
            return _bitcoin
        if fp is not None:
            try:
                _mod = imp.load_module('_bitcoin', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _bitcoin = swig_import_helper()
    del swig_import_helper
else:
    import _bitcoin
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bitcoin.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _bitcoin.SwigPyIterator_value(self)
    def incr(self, n = 1): return _bitcoin.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _bitcoin.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _bitcoin.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _bitcoin.SwigPyIterator_equal(self, *args)
    def copy(self): return _bitcoin.SwigPyIterator_copy(self)
    def next(self): return _bitcoin.SwigPyIterator_next(self)
    def __next__(self): return _bitcoin.SwigPyIterator___next__(self)
    def previous(self): return _bitcoin.SwigPyIterator_previous(self)
    def advance(self, *args): return _bitcoin.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _bitcoin.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _bitcoin.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _bitcoin.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _bitcoin.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _bitcoin.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _bitcoin.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _bitcoin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _bitcoin.SHARED_PTR_DISOWN
class py_input_point_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _bitcoin.py_input_point_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _bitcoin.py_input_point_list___nonzero__(self)
    def __bool__(self): return _bitcoin.py_input_point_list___bool__(self)
    def __len__(self): return _bitcoin.py_input_point_list___len__(self)
    def pop(self): return _bitcoin.py_input_point_list_pop(self)
    def __getslice__(self, *args): return _bitcoin.py_input_point_list___getslice__(self, *args)
    def __setslice__(self, *args): return _bitcoin.py_input_point_list___setslice__(self, *args)
    def __delslice__(self, *args): return _bitcoin.py_input_point_list___delslice__(self, *args)
    def __delitem__(self, *args): return _bitcoin.py_input_point_list___delitem__(self, *args)
    def __getitem__(self, *args): return _bitcoin.py_input_point_list___getitem__(self, *args)
    def __setitem__(self, *args): return _bitcoin.py_input_point_list___setitem__(self, *args)
    def append(self, *args): return _bitcoin.py_input_point_list_append(self, *args)
    def empty(self): return _bitcoin.py_input_point_list_empty(self)
    def size(self): return _bitcoin.py_input_point_list_size(self)
    def clear(self): return _bitcoin.py_input_point_list_clear(self)
    def swap(self, *args): return _bitcoin.py_input_point_list_swap(self, *args)
    def get_allocator(self): return _bitcoin.py_input_point_list_get_allocator(self)
    def begin(self): return _bitcoin.py_input_point_list_begin(self)
    def end(self): return _bitcoin.py_input_point_list_end(self)
    def rbegin(self): return _bitcoin.py_input_point_list_rbegin(self)
    def rend(self): return _bitcoin.py_input_point_list_rend(self)
    def pop_back(self): return _bitcoin.py_input_point_list_pop_back(self)
    def erase(self, *args): return _bitcoin.py_input_point_list_erase(self, *args)
    def __init__(self, *args): 
        this = _bitcoin.new_py_input_point_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _bitcoin.py_input_point_list_push_back(self, *args)
    def front(self): return _bitcoin.py_input_point_list_front(self)
    def back(self): return _bitcoin.py_input_point_list_back(self)
    def assign(self, *args): return _bitcoin.py_input_point_list_assign(self, *args)
    def resize(self, *args): return _bitcoin.py_input_point_list_resize(self, *args)
    def insert(self, *args): return _bitcoin.py_input_point_list_insert(self, *args)
    def reserve(self, *args): return _bitcoin.py_input_point_list_reserve(self, *args)
    def capacity(self): return _bitcoin.py_input_point_list_capacity(self)
    __swig_destroy__ = _bitcoin.delete_py_input_point_list
    __del__ = lambda self : None;
py_input_point_list_swigregister = _bitcoin.py_input_point_list_swigregister
py_input_point_list_swigregister(py_input_point_list)

class py_transaction_input_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _bitcoin.py_transaction_input_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _bitcoin.py_transaction_input_list___nonzero__(self)
    def __bool__(self): return _bitcoin.py_transaction_input_list___bool__(self)
    def __len__(self): return _bitcoin.py_transaction_input_list___len__(self)
    def pop(self): return _bitcoin.py_transaction_input_list_pop(self)
    def __getslice__(self, *args): return _bitcoin.py_transaction_input_list___getslice__(self, *args)
    def __setslice__(self, *args): return _bitcoin.py_transaction_input_list___setslice__(self, *args)
    def __delslice__(self, *args): return _bitcoin.py_transaction_input_list___delslice__(self, *args)
    def __delitem__(self, *args): return _bitcoin.py_transaction_input_list___delitem__(self, *args)
    def __getitem__(self, *args): return _bitcoin.py_transaction_input_list___getitem__(self, *args)
    def __setitem__(self, *args): return _bitcoin.py_transaction_input_list___setitem__(self, *args)
    def append(self, *args): return _bitcoin.py_transaction_input_list_append(self, *args)
    def empty(self): return _bitcoin.py_transaction_input_list_empty(self)
    def size(self): return _bitcoin.py_transaction_input_list_size(self)
    def clear(self): return _bitcoin.py_transaction_input_list_clear(self)
    def swap(self, *args): return _bitcoin.py_transaction_input_list_swap(self, *args)
    def get_allocator(self): return _bitcoin.py_transaction_input_list_get_allocator(self)
    def begin(self): return _bitcoin.py_transaction_input_list_begin(self)
    def end(self): return _bitcoin.py_transaction_input_list_end(self)
    def rbegin(self): return _bitcoin.py_transaction_input_list_rbegin(self)
    def rend(self): return _bitcoin.py_transaction_input_list_rend(self)
    def pop_back(self): return _bitcoin.py_transaction_input_list_pop_back(self)
    def erase(self, *args): return _bitcoin.py_transaction_input_list_erase(self, *args)
    def __init__(self, *args): 
        this = _bitcoin.new_py_transaction_input_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _bitcoin.py_transaction_input_list_push_back(self, *args)
    def front(self): return _bitcoin.py_transaction_input_list_front(self)
    def back(self): return _bitcoin.py_transaction_input_list_back(self)
    def assign(self, *args): return _bitcoin.py_transaction_input_list_assign(self, *args)
    def resize(self, *args): return _bitcoin.py_transaction_input_list_resize(self, *args)
    def insert(self, *args): return _bitcoin.py_transaction_input_list_insert(self, *args)
    def reserve(self, *args): return _bitcoin.py_transaction_input_list_reserve(self, *args)
    def capacity(self): return _bitcoin.py_transaction_input_list_capacity(self)
    __swig_destroy__ = _bitcoin.delete_py_transaction_input_list
    __del__ = lambda self : None;
py_transaction_input_list_swigregister = _bitcoin.py_transaction_input_list_swigregister
py_transaction_input_list_swigregister(py_transaction_input_list)

class py_transaction_output_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _bitcoin.py_transaction_output_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _bitcoin.py_transaction_output_list___nonzero__(self)
    def __bool__(self): return _bitcoin.py_transaction_output_list___bool__(self)
    def __len__(self): return _bitcoin.py_transaction_output_list___len__(self)
    def pop(self): return _bitcoin.py_transaction_output_list_pop(self)
    def __getslice__(self, *args): return _bitcoin.py_transaction_output_list___getslice__(self, *args)
    def __setslice__(self, *args): return _bitcoin.py_transaction_output_list___setslice__(self, *args)
    def __delslice__(self, *args): return _bitcoin.py_transaction_output_list___delslice__(self, *args)
    def __delitem__(self, *args): return _bitcoin.py_transaction_output_list___delitem__(self, *args)
    def __getitem__(self, *args): return _bitcoin.py_transaction_output_list___getitem__(self, *args)
    def __setitem__(self, *args): return _bitcoin.py_transaction_output_list___setitem__(self, *args)
    def append(self, *args): return _bitcoin.py_transaction_output_list_append(self, *args)
    def empty(self): return _bitcoin.py_transaction_output_list_empty(self)
    def size(self): return _bitcoin.py_transaction_output_list_size(self)
    def clear(self): return _bitcoin.py_transaction_output_list_clear(self)
    def swap(self, *args): return _bitcoin.py_transaction_output_list_swap(self, *args)
    def get_allocator(self): return _bitcoin.py_transaction_output_list_get_allocator(self)
    def begin(self): return _bitcoin.py_transaction_output_list_begin(self)
    def end(self): return _bitcoin.py_transaction_output_list_end(self)
    def rbegin(self): return _bitcoin.py_transaction_output_list_rbegin(self)
    def rend(self): return _bitcoin.py_transaction_output_list_rend(self)
    def pop_back(self): return _bitcoin.py_transaction_output_list_pop_back(self)
    def erase(self, *args): return _bitcoin.py_transaction_output_list_erase(self, *args)
    def __init__(self, *args): 
        this = _bitcoin.new_py_transaction_output_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _bitcoin.py_transaction_output_list_push_back(self, *args)
    def front(self): return _bitcoin.py_transaction_output_list_front(self)
    def back(self): return _bitcoin.py_transaction_output_list_back(self)
    def assign(self, *args): return _bitcoin.py_transaction_output_list_assign(self, *args)
    def resize(self, *args): return _bitcoin.py_transaction_output_list_resize(self, *args)
    def insert(self, *args): return _bitcoin.py_transaction_output_list_insert(self, *args)
    def reserve(self, *args): return _bitcoin.py_transaction_output_list_reserve(self, *args)
    def capacity(self): return _bitcoin.py_transaction_output_list_capacity(self)
    __swig_destroy__ = _bitcoin.delete_py_transaction_output_list
    __del__ = lambda self : None;
py_transaction_output_list_swigregister = _bitcoin.py_transaction_output_list_swigregister
py_transaction_output_list_swigregister(py_transaction_output_list)

class py_transaction_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _bitcoin.py_transaction_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _bitcoin.py_transaction_list___nonzero__(self)
    def __bool__(self): return _bitcoin.py_transaction_list___bool__(self)
    def __len__(self): return _bitcoin.py_transaction_list___len__(self)
    def pop(self): return _bitcoin.py_transaction_list_pop(self)
    def __getslice__(self, *args): return _bitcoin.py_transaction_list___getslice__(self, *args)
    def __setslice__(self, *args): return _bitcoin.py_transaction_list___setslice__(self, *args)
    def __delslice__(self, *args): return _bitcoin.py_transaction_list___delslice__(self, *args)
    def __delitem__(self, *args): return _bitcoin.py_transaction_list___delitem__(self, *args)
    def __getitem__(self, *args): return _bitcoin.py_transaction_list___getitem__(self, *args)
    def __setitem__(self, *args): return _bitcoin.py_transaction_list___setitem__(self, *args)
    def append(self, *args): return _bitcoin.py_transaction_list_append(self, *args)
    def empty(self): return _bitcoin.py_transaction_list_empty(self)
    def size(self): return _bitcoin.py_transaction_list_size(self)
    def clear(self): return _bitcoin.py_transaction_list_clear(self)
    def swap(self, *args): return _bitcoin.py_transaction_list_swap(self, *args)
    def get_allocator(self): return _bitcoin.py_transaction_list_get_allocator(self)
    def begin(self): return _bitcoin.py_transaction_list_begin(self)
    def end(self): return _bitcoin.py_transaction_list_end(self)
    def rbegin(self): return _bitcoin.py_transaction_list_rbegin(self)
    def rend(self): return _bitcoin.py_transaction_list_rend(self)
    def pop_back(self): return _bitcoin.py_transaction_list_pop_back(self)
    def erase(self, *args): return _bitcoin.py_transaction_list_erase(self, *args)
    def __init__(self, *args): 
        this = _bitcoin.new_py_transaction_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _bitcoin.py_transaction_list_push_back(self, *args)
    def front(self): return _bitcoin.py_transaction_list_front(self)
    def back(self): return _bitcoin.py_transaction_list_back(self)
    def assign(self, *args): return _bitcoin.py_transaction_list_assign(self, *args)
    def resize(self, *args): return _bitcoin.py_transaction_list_resize(self, *args)
    def insert(self, *args): return _bitcoin.py_transaction_list_insert(self, *args)
    def reserve(self, *args): return _bitcoin.py_transaction_list_reserve(self, *args)
    def capacity(self): return _bitcoin.py_transaction_list_capacity(self)
    __swig_destroy__ = _bitcoin.delete_py_transaction_list
    __del__ = lambda self : None;
py_transaction_list_swigregister = _bitcoin.py_transaction_list_swigregister
py_transaction_list_swigregister(py_transaction_list)

class py_size_list(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _bitcoin.py_size_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _bitcoin.py_size_list___nonzero__(self)
    def __bool__(self): return _bitcoin.py_size_list___bool__(self)
    def __len__(self): return _bitcoin.py_size_list___len__(self)
    def pop(self): return _bitcoin.py_size_list_pop(self)
    def __getslice__(self, *args): return _bitcoin.py_size_list___getslice__(self, *args)
    def __setslice__(self, *args): return _bitcoin.py_size_list___setslice__(self, *args)
    def __delslice__(self, *args): return _bitcoin.py_size_list___delslice__(self, *args)
    def __delitem__(self, *args): return _bitcoin.py_size_list___delitem__(self, *args)
    def __getitem__(self, *args): return _bitcoin.py_size_list___getitem__(self, *args)
    def __setitem__(self, *args): return _bitcoin.py_size_list___setitem__(self, *args)
    def append(self, *args): return _bitcoin.py_size_list_append(self, *args)
    def empty(self): return _bitcoin.py_size_list_empty(self)
    def size(self): return _bitcoin.py_size_list_size(self)
    def clear(self): return _bitcoin.py_size_list_clear(self)
    def swap(self, *args): return _bitcoin.py_size_list_swap(self, *args)
    def get_allocator(self): return _bitcoin.py_size_list_get_allocator(self)
    def begin(self): return _bitcoin.py_size_list_begin(self)
    def end(self): return _bitcoin.py_size_list_end(self)
    def rbegin(self): return _bitcoin.py_size_list_rbegin(self)
    def rend(self): return _bitcoin.py_size_list_rend(self)
    def pop_back(self): return _bitcoin.py_size_list_pop_back(self)
    def erase(self, *args): return _bitcoin.py_size_list_erase(self, *args)
    def __init__(self, *args): 
        this = _bitcoin.new_py_size_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _bitcoin.py_size_list_push_back(self, *args)
    def front(self): return _bitcoin.py_size_list_front(self)
    def back(self): return _bitcoin.py_size_list_back(self)
    def assign(self, *args): return _bitcoin.py_size_list_assign(self, *args)
    def resize(self, *args): return _bitcoin.py_size_list_resize(self, *args)
    def insert(self, *args): return _bitcoin.py_size_list_insert(self, *args)
    def reserve(self, *args): return _bitcoin.py_size_list_reserve(self, *args)
    def capacity(self): return _bitcoin.py_size_list_capacity(self)
    __swig_destroy__ = _bitcoin.delete_py_size_list
    __del__ = lambda self : None;
py_size_list_swigregister = _bitcoin.py_size_list_swigregister
py_size_list_swigregister(py_size_list)


def python_block_type_cb_handler(*args):
  return _bitcoin.python_block_type_cb_handler(*args)
python_block_type_cb_handler = _bitcoin.python_block_type_cb_handler

def python_transaction_type_cb_handler(*args):
  return _bitcoin.python_transaction_type_cb_handler(*args)
python_transaction_type_cb_handler = _bitcoin.python_transaction_type_cb_handler

def python_block_locator_type_cb_handler(*args):
  return _bitcoin.python_block_locator_type_cb_handler(*args)
python_block_locator_type_cb_handler = _bitcoin.python_block_locator_type_cb_handler

def python_inventory_list_cb_handler(*args):
  return _bitcoin.python_inventory_list_cb_handler(*args)
python_inventory_list_cb_handler = _bitcoin.python_inventory_list_cb_handler

def python_output_point_list_cb_handler(*args):
  return _bitcoin.python_output_point_list_cb_handler(*args)
python_output_point_list_cb_handler = _bitcoin.python_output_point_list_cb_handler

def python_address_type_cb_handler(*args):
  return _bitcoin.python_address_type_cb_handler(*args)
python_address_type_cb_handler = _bitcoin.python_address_type_cb_handler

def python_get_address_type_cb_handler(*args):
  return _bitcoin.python_get_address_type_cb_handler(*args)
python_get_address_type_cb_handler = _bitcoin.python_get_address_type_cb_handler

def python_input_point_cb_handler(*args):
  return _bitcoin.python_input_point_cb_handler(*args)
python_input_point_cb_handler = _bitcoin.python_input_point_cb_handler

def python_index_list_cb_handler(*args):
  return _bitcoin.python_index_list_cb_handler(*args)
python_index_list_cb_handler = _bitcoin.python_index_list_cb_handler

def python_cb_handler(*args):
  return _bitcoin.python_cb_handler(*args)
python_cb_handler = _bitcoin.python_cb_handler

def python_size_t_cb_handler(*args):
  return _bitcoin.python_size_t_cb_handler(*args)
python_size_t_cb_handler = _bitcoin.python_size_t_cb_handler

def python_channel_cb_handler(*args):
  return _bitcoin.python_channel_cb_handler(*args)
python_channel_cb_handler = _bitcoin.python_channel_cb_handler
class node_address(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hostname = _swig_property(_bitcoin.node_address_hostname_get, _bitcoin.node_address_hostname_set)
    port = _swig_property(_bitcoin.node_address_port_get, _bitcoin.node_address_port_set)
    def __init__(self): 
        this = _bitcoin.new_node_address()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_node_address
    __del__ = lambda self : None;
node_address_swigregister = _bitcoin.node_address_swigregister
node_address_swigregister(node_address)

class error_code(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def clear(self): return _bitcoin.error_code_clear(self)
    def value(self): return _bitcoin.error_code_value(self)
    def default_error_condition(self): return _bitcoin.error_code_default_error_condition(self)
    def message(self): return _bitcoin.error_code_message(self)
    def __nonzero__(self):
        return _bitcoin.error_code___nonzero__(self)
    __bool__ = __nonzero__


    def __str__(self):
        return "error_code(%d, '%s')" % (self.value(), self.message())
    def __int__(self):
        return self.value()
    def __nonzero__(self):
        return self.value() != 0
    def __bool__(self):
        return self.__nonzero__

    def __init__(self): 
        this = _bitcoin.new_error_code()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_error_code
    __del__ = lambda self : None;
error_code_swigregister = _bitcoin.error_code_swigregister
error_code_swigregister(error_code)

class operation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    code = _swig_property(_bitcoin.operation_code_get, _bitcoin.operation_code_set)
    data = _swig_property(_bitcoin.operation_data_get, _bitcoin.operation_data_set)
    def __init__(self): 
        this = _bitcoin.new_operation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_operation
    __del__ = lambda self : None;
operation_swigregister = _bitcoin.operation_swigregister
operation_swigregister(operation)

class script(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def join(self, *args): return _bitcoin.script_join(self, *args)
    def push_operation(self, *args): return _bitcoin.script_push_operation(self, *args)
    def run(self, *args): return _bitcoin.script_run(self, *args)
    def type(self): return _bitcoin.script_type(self)
    def operations(self): return _bitcoin.script_operations(self)
    generate_signature_hash = staticmethod(_bitcoin.script_generate_signature_hash)
    def __init__(self): 
        this = _bitcoin.new_script()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_script
    __del__ = lambda self : None;
script_swigregister = _bitcoin.script_swigregister
script_swigregister(script)

def script_generate_signature_hash(*args):
  return _bitcoin.script_generate_signature_hash(*args)
script_generate_signature_hash = _bitcoin.script_generate_signature_hash


def opcode_to_string(*args):
  return _bitcoin.opcode_to_string(*args)
opcode_to_string = _bitcoin.opcode_to_string

def string_to_opcode(*args):
  return _bitcoin.string_to_opcode(*args)
string_to_opcode = _bitcoin.string_to_opcode

def __lshift__(*args):
  return _bitcoin.__lshift__(*args)
__lshift__ = _bitcoin.__lshift__

def coinbase_script(*args):
  return _bitcoin.coinbase_script(*args)
coinbase_script = _bitcoin.coinbase_script

def parse_script(*args):
  return _bitcoin.parse_script(*args)
parse_script = _bitcoin.parse_script

def save_script(*args):
  return _bitcoin.save_script(*args)
save_script = _bitcoin.save_script

def script_size(*args):
  return _bitcoin.script_size(*args)
script_size = _bitcoin.script_size
class network_address_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timestamp = _swig_property(_bitcoin.network_address_type_timestamp_get, _bitcoin.network_address_type_timestamp_set)
    services = _swig_property(_bitcoin.network_address_type_services_get, _bitcoin.network_address_type_services_set)
    ip = _swig_property(_bitcoin.network_address_type_ip_get, _bitcoin.network_address_type_ip_set)
    port = _swig_property(_bitcoin.network_address_type_port_get, _bitcoin.network_address_type_port_set)
    def __init__(self): 
        this = _bitcoin.new_network_address_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_network_address_type
    __del__ = lambda self : None;
network_address_type_swigregister = _bitcoin.network_address_type_swigregister
network_address_type_swigregister(network_address_type)

class inventory_vector_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_bitcoin.inventory_vector_type_type_get, _bitcoin.inventory_vector_type_type_set)
    hash = _swig_property(_bitcoin.inventory_vector_type_hash_get, _bitcoin.inventory_vector_type_hash_set)
    def __init__(self): 
        this = _bitcoin.new_inventory_vector_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_inventory_vector_type
    __del__ = lambda self : None;
inventory_vector_type_swigregister = _bitcoin.inventory_vector_type_swigregister
inventory_vector_type_swigregister(inventory_vector_type)

class header_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    magic = _swig_property(_bitcoin.header_type_magic_get, _bitcoin.header_type_magic_set)
    command = _swig_property(_bitcoin.header_type_command_get, _bitcoin.header_type_command_set)
    payload_length = _swig_property(_bitcoin.header_type_payload_length_get, _bitcoin.header_type_payload_length_set)
    checksum = _swig_property(_bitcoin.header_type_checksum_get, _bitcoin.header_type_checksum_set)
    def __init__(self): 
        this = _bitcoin.new_header_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_header_type
    __del__ = lambda self : None;
header_type_swigregister = _bitcoin.header_type_swigregister
header_type_swigregister(header_type)

class version_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_bitcoin.version_type_version_get, _bitcoin.version_type_version_set)
    services = _swig_property(_bitcoin.version_type_services_get, _bitcoin.version_type_services_set)
    timestamp = _swig_property(_bitcoin.version_type_timestamp_get, _bitcoin.version_type_timestamp_set)
    address_me = _swig_property(_bitcoin.version_type_address_me_get, _bitcoin.version_type_address_me_set)
    address_you = _swig_property(_bitcoin.version_type_address_you_get, _bitcoin.version_type_address_you_set)
    nonce = _swig_property(_bitcoin.version_type_nonce_get, _bitcoin.version_type_nonce_set)
    user_agent = _swig_property(_bitcoin.version_type_user_agent_get, _bitcoin.version_type_user_agent_set)
    start_depth = _swig_property(_bitcoin.version_type_start_depth_get, _bitcoin.version_type_start_depth_set)
    def __init__(self): 
        this = _bitcoin.new_version_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_version_type
    __del__ = lambda self : None;
version_type_swigregister = _bitcoin.version_type_swigregister
version_type_swigregister(version_type)

class verack_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _bitcoin.new_verack_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_verack_type
    __del__ = lambda self : None;
verack_type_swigregister = _bitcoin.verack_type_swigregister
verack_type_swigregister(verack_type)

class get_address_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _bitcoin.new_get_address_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_get_address_type
    __del__ = lambda self : None;
get_address_type_swigregister = _bitcoin.get_address_type_swigregister
get_address_type_swigregister(get_address_type)

class get_blocks_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start_hashes = _swig_property(_bitcoin.get_blocks_type_start_hashes_get, _bitcoin.get_blocks_type_start_hashes_set)
    hash_stop = _swig_property(_bitcoin.get_blocks_type_hash_stop_get, _bitcoin.get_blocks_type_hash_stop_set)
    def __init__(self): 
        this = _bitcoin.new_get_blocks_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_get_blocks_type
    __del__ = lambda self : None;
get_blocks_type_swigregister = _bitcoin.get_blocks_type_swigregister
get_blocks_type_swigregister(get_blocks_type)

class output_point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hash = _swig_property(_bitcoin.output_point_hash_get, _bitcoin.output_point_hash_set)
    index = _swig_property(_bitcoin.output_point_index_get, _bitcoin.output_point_index_set)
    def __init__(self): 
        this = _bitcoin.new_output_point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_output_point
    __del__ = lambda self : None;
output_point_swigregister = _bitcoin.output_point_swigregister
output_point_swigregister(output_point)

class transaction_input_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    previous_output = _swig_property(_bitcoin.transaction_input_type_previous_output_get, _bitcoin.transaction_input_type_previous_output_set)
    input_script = _swig_property(_bitcoin.transaction_input_type_input_script_get, _bitcoin.transaction_input_type_input_script_set)
    sequence = _swig_property(_bitcoin.transaction_input_type_sequence_get, _bitcoin.transaction_input_type_sequence_set)
    def __init__(self): 
        this = _bitcoin.new_transaction_input_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_transaction_input_type
    __del__ = lambda self : None;
transaction_input_type_swigregister = _bitcoin.transaction_input_type_swigregister
transaction_input_type_swigregister(transaction_input_type)

class transaction_output_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_bitcoin.transaction_output_type_value_get, _bitcoin.transaction_output_type_value_set)
    output_script = _swig_property(_bitcoin.transaction_output_type_output_script_get, _bitcoin.transaction_output_type_output_script_set)
    def __init__(self): 
        this = _bitcoin.new_transaction_output_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_transaction_output_type
    __del__ = lambda self : None;
transaction_output_type_swigregister = _bitcoin.transaction_output_type_swigregister
transaction_output_type_swigregister(transaction_output_type)

class transaction_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_bitcoin.transaction_type_version_get, _bitcoin.transaction_type_version_set)
    locktime = _swig_property(_bitcoin.transaction_type_locktime_get, _bitcoin.transaction_type_locktime_set)
    inputs = _swig_property(_bitcoin.transaction_type_inputs_get, _bitcoin.transaction_type_inputs_set)
    outputs = _swig_property(_bitcoin.transaction_type_outputs_get, _bitcoin.transaction_type_outputs_set)
    def __init__(self): 
        this = _bitcoin.new_transaction_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_transaction_type
    __del__ = lambda self : None;
transaction_type_swigregister = _bitcoin.transaction_type_swigregister
transaction_type_swigregister(transaction_type)

class block_type(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    version = _swig_property(_bitcoin.block_type_version_get, _bitcoin.block_type_version_set)
    previous_block_hash = _swig_property(_bitcoin.block_type_previous_block_hash_get, _bitcoin.block_type_previous_block_hash_set)
    merkle = _swig_property(_bitcoin.block_type_merkle_get, _bitcoin.block_type_merkle_set)
    timestamp = _swig_property(_bitcoin.block_type_timestamp_get, _bitcoin.block_type_timestamp_set)
    bits = _swig_property(_bitcoin.block_type_bits_get, _bitcoin.block_type_bits_set)
    nonce = _swig_property(_bitcoin.block_type_nonce_get, _bitcoin.block_type_nonce_set)
    transactions = _swig_property(_bitcoin.block_type_transactions_get, _bitcoin.block_type_transactions_set)
    def __init__(self): 
        this = _bitcoin.new_block_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_block_type
    __del__ = lambda self : None;
block_type_swigregister = _bitcoin.block_type_swigregister
block_type_swigregister(block_type)

class threadpool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_threadpool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_threadpool
    __del__ = lambda self : None;
    def spawn(self): return _bitcoin.threadpool_spawn(self)
    def stop(self): return _bitcoin.threadpool_stop(self)
    def shutdown(self): return _bitcoin.threadpool_shutdown(self)
    def join(self): return _bitcoin.threadpool_join(self)
    def service(self, *args): return _bitcoin.threadpool_service(self, *args)
threadpool_swigregister = _bitcoin.threadpool_swigregister
threadpool_swigregister(threadpool)

class async_strand(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_async_strand(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_async_strand
    __del__ = lambda self : None;
async_strand_swigregister = _bitcoin.async_strand_swigregister
async_strand_swigregister(async_strand)

class hosts(async_strand):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_hosts(*args)
        try: self.this.append(this)
        except: self.this = this
    def load(self, *args): return _bitcoin.hosts_load(self, *args)
    def save(self, *args): return _bitcoin.hosts_save(self, *args)
    def store(self, *args): return _bitcoin.hosts_store(self, *args)
    def remove(self, *args): return _bitcoin.hosts_remove(self, *args)
    def fetch_address(self, *args): return _bitcoin.hosts_fetch_address(self, *args)
    def fetch_count(self, *args): return _bitcoin.hosts_fetch_count(self, *args)
    __swig_destroy__ = _bitcoin.delete_hosts
    __del__ = lambda self : None;
hosts_swigregister = _bitcoin.hosts_swigregister
hosts_swigregister(hosts)

class handshake(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_handshake(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self, *args): return _bitcoin.handshake_start(self, *args)
    def ready(self, *args): return _bitcoin.handshake_ready(self, *args)
    def discover_external_ip(self, *args): return _bitcoin.handshake_discover_external_ip(self, *args)
    def fetch_network_address(self, *args): return _bitcoin.handshake_fetch_network_address(self, *args)
    def set_port(self, *args): return _bitcoin.handshake_set_port(self, *args)
    def set_user_agent(self, *args): return _bitcoin.handshake_set_user_agent(self, *args)
    def set_start_depth(self, *args): return _bitcoin.handshake_set_start_depth(self, *args)
    __swig_destroy__ = _bitcoin.delete_handshake
    __del__ = lambda self : None;
handshake_swigregister = _bitcoin.handshake_swigregister
handshake_swigregister(handshake)


def connect(*args):
  return _bitcoin.connect(*args)
connect = _bitcoin.connect
class acceptor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_acceptor(*args)
        try: self.this.append(this)
        except: self.this = this
    def accept(self, *args): return _bitcoin.acceptor_accept(self, *args)
    __swig_destroy__ = _bitcoin.delete_acceptor
    __del__ = lambda self : None;
acceptor_swigregister = _bitcoin.acceptor_swigregister
acceptor_swigregister(acceptor)

class network(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_network(*args)
        try: self.this.append(this)
        except: self.this = this
    def listen(self, *args): return _bitcoin.network_listen(self, *args)
    def connect(self, *args): return _bitcoin.network_connect(self, *args)
    __swig_destroy__ = _bitcoin.delete_network
    __del__ = lambda self : None;
network_swigregister = _bitcoin.network_swigregister
network_swigregister(network)

class channel_loader_module_base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bitcoin.delete_channel_loader_module_base
    __del__ = lambda self : None;
    def attempt_load(self, *args): return _bitcoin.channel_loader_module_base_attempt_load(self, *args)
    def lookup_symbol(self): return _bitcoin.channel_loader_module_base_lookup_symbol(self)
channel_loader_module_base_swigregister = _bitcoin.channel_loader_module_base_swigregister
channel_loader_module_base_swigregister(channel_loader_module_base)

class channel_stream_loader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _bitcoin.delete_channel_stream_loader
    __del__ = lambda self : None;
    def add(self, *args): return _bitcoin.channel_stream_loader_add(self, *args)
    def load_lookup(self, *args): return _bitcoin.channel_stream_loader_load_lookup(self, *args)
    def __init__(self): 
        this = _bitcoin.new_channel_stream_loader()
        try: self.this.append(this)
        except: self.this = this
channel_stream_loader_swigregister = _bitcoin.channel_stream_loader_swigregister
channel_stream_loader_swigregister(channel_stream_loader)

class channel_proxy(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_channel_proxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_channel_proxy
    __del__ = lambda self : None;
    def start(self): return _bitcoin.channel_proxy_start(self)
    def stop(self): return _bitcoin.channel_proxy_stop(self)
    def stopped(self): return _bitcoin.channel_proxy_stopped(self)
    def send_raw(self, *args): return _bitcoin.channel_proxy_send_raw(self, *args)
    def subscribe_version(self, *args): return _bitcoin.channel_proxy_subscribe_version(self, *args)
    def subscribe_verack(self, *args): return _bitcoin.channel_proxy_subscribe_verack(self, *args)
    def subscribe_address(self, *args): return _bitcoin.channel_proxy_subscribe_address(self, *args)
    def subscribe_get_address(self, *args): return _bitcoin.channel_proxy_subscribe_get_address(self, *args)
    def subscribe_inventory(self, *args): return _bitcoin.channel_proxy_subscribe_inventory(self, *args)
    def subscribe_get_data(self, *args): return _bitcoin.channel_proxy_subscribe_get_data(self, *args)
    def subscribe_get_blocks(self, *args): return _bitcoin.channel_proxy_subscribe_get_blocks(self, *args)
    def subscribe_transaction(self, *args): return _bitcoin.channel_proxy_subscribe_transaction(self, *args)
    def subscribe_block(self, *args): return _bitcoin.channel_proxy_subscribe_block(self, *args)
    def subscribe_raw(self, *args): return _bitcoin.channel_proxy_subscribe_raw(self, *args)
    def subscribe_stop(self, *args): return _bitcoin.channel_proxy_subscribe_stop(self, *args)
channel_proxy_swigregister = _bitcoin.channel_proxy_swigregister
channel_proxy_swigregister(channel_proxy)

class channel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_channel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_channel
    __del__ = lambda self : None;
    def stop(self): return _bitcoin.channel_stop(self)
    def stopped(self): return _bitcoin.channel_stopped(self)
    def send_raw(self, *args): return _bitcoin.channel_send_raw(self, *args)
    def subscribe_version(self, *args): return _bitcoin.channel_subscribe_version(self, *args)
    def subscribe_verack(self, *args): return _bitcoin.channel_subscribe_verack(self, *args)
    def subscribe_address(self, *args): return _bitcoin.channel_subscribe_address(self, *args)
    def subscribe_get_address(self, *args): return _bitcoin.channel_subscribe_get_address(self, *args)
    def subscribe_inventory(self, *args): return _bitcoin.channel_subscribe_inventory(self, *args)
    def subscribe_get_data(self, *args): return _bitcoin.channel_subscribe_get_data(self, *args)
    def subscribe_get_blocks(self, *args): return _bitcoin.channel_subscribe_get_blocks(self, *args)
    def subscribe_transaction(self, *args): return _bitcoin.channel_subscribe_transaction(self, *args)
    def subscribe_block(self, *args): return _bitcoin.channel_subscribe_block(self, *args)
    def subscribe_raw(self, *args): return _bitcoin.channel_subscribe_raw(self, *args)
    def subscribe_stop(self, *args): return _bitcoin.channel_subscribe_stop(self, *args)
channel_swigregister = _bitcoin.channel_swigregister
channel_swigregister(channel)

class py_channel_ptr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _bitcoin.new_py_channel_ptr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_py_channel_ptr
    __del__ = lambda self : None;
py_channel_ptr_swigregister = _bitcoin.py_channel_ptr_swigregister
py_channel_ptr_swigregister(py_channel_ptr)

class protocol(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_protocol(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self, *args): return _bitcoin.protocol_start(self, *args)
    def stop(self, *args): return _bitcoin.protocol_stop(self, *args)
    def bootstrap(self, *args): return _bitcoin.protocol_bootstrap(self, *args)
    def run(self): return _bitcoin.protocol_run(self)
    def fetch_connection_count(self, *args): return _bitcoin.protocol_fetch_connection_count(self, *args)
    def subscribe_channel(self, *args): return _bitcoin.protocol_subscribe_channel(self, *args)
    __swig_destroy__ = _bitcoin.delete_protocol
    __del__ = lambda self : None;
protocol_swigregister = _bitcoin.protocol_swigregister
protocol_swigregister(protocol)

class elliptic_curve_key(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _bitcoin.delete_elliptic_curve_key
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _bitcoin.new_elliptic_curve_key(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_public_key(self, *args): return _bitcoin.elliptic_curve_key_set_public_key(self, *args)
    def public_key(self): return _bitcoin.elliptic_curve_key_public_key(self)
    def verify(self, *args): return _bitcoin.elliptic_curve_key_verify(self, *args)
    def new_key_pair(self): return _bitcoin.elliptic_curve_key_new_key_pair(self)
    def set_private_key(self, *args): return _bitcoin.elliptic_curve_key_set_private_key(self, *args)
    def private_key(self): return _bitcoin.elliptic_curve_key_private_key(self)
    def sign(self, *args): return _bitcoin.elliptic_curve_key_sign(self, *args)
    def set_secret(self, *args): return _bitcoin.elliptic_curve_key_set_secret(self, *args)
    def secret(self): return _bitcoin.elliptic_curve_key_secret(self)
elliptic_curve_key_swigregister = _bitcoin.elliptic_curve_key_swigregister
elliptic_curve_key_swigregister(elliptic_curve_key)

class block_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    status = _swig_property(_bitcoin.block_info_status_get, _bitcoin.block_info_status_set)
    depth = _swig_property(_bitcoin.block_info_depth_get, _bitcoin.block_info_depth_set)
    def __init__(self): 
        this = _bitcoin.new_block_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_block_info
    __del__ = lambda self : None;
block_info_swigregister = _bitcoin.block_info_swigregister
block_info_swigregister(block_info)


def block_value(*args):
  return _bitcoin.block_value(*args)
block_value = _bitcoin.block_value

def block_work(*args):
  return _bitcoin.block_work(*args)
block_work = _bitcoin.block_work

def hash_block_header(*args):
  return _bitcoin.hash_block_header(*args)
hash_block_header = _bitcoin.hash_block_header

def block_locator_indexes(*args):
  return _bitcoin.block_locator_indexes(*args)
block_locator_indexes = _bitcoin.block_locator_indexes

def genesis_block():
  return _bitcoin.genesis_block()
genesis_block = _bitcoin.genesis_block
class blockchain(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bitcoin.delete_blockchain
    __del__ = lambda self : None;
    def store(self, *args): return _bitcoin.blockchain_store(self, *args)
    def _import(self, *args): return _bitcoin.blockchain__import(self, *args)
    def fetch_block_header(self, *args): return _bitcoin.blockchain_fetch_block_header(self, *args)
    def fetch_block_transaction_hashes(self, *args): return _bitcoin.blockchain_fetch_block_transaction_hashes(self, *args)
    def fetch_block_depth(self, *args): return _bitcoin.blockchain_fetch_block_depth(self, *args)
    def fetch_last_depth(self, *args): return _bitcoin.blockchain_fetch_last_depth(self, *args)
    def fetch_transaction(self, *args): return _bitcoin.blockchain_fetch_transaction(self, *args)
    def fetch_transaction_index(self, *args): return _bitcoin.blockchain_fetch_transaction_index(self, *args)
    def fetch_spend(self, *args): return _bitcoin.blockchain_fetch_spend(self, *args)
    def fetch_outputs(self, *args): return _bitcoin.blockchain_fetch_outputs(self, *args)
    def subscribe_reorganize(self, *args): return _bitcoin.blockchain_subscribe_reorganize(self, *args)
    def import_block(self, *args): return _bitcoin.blockchain_import_block(self, *args)
    def py_fetch_block_header(self, *args): return _bitcoin.blockchain_py_fetch_block_header(self, *args)
blockchain_swigregister = _bitcoin.blockchain_swigregister
blockchain_swigregister(blockchain)


def fetch_block_locator(*args):
  return _bitcoin.fetch_block_locator(*args)
fetch_block_locator = _bitcoin.fetch_block_locator
class leveldb_blockchain(blockchain,async_strand):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_leveldb_blockchain(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_leveldb_blockchain
    __del__ = lambda self : None;
    def start(self, *args): return _bitcoin.leveldb_blockchain_start(self, *args)
    def stop(self): return _bitcoin.leveldb_blockchain_stop(self)
    def store(self, *args): return _bitcoin.leveldb_blockchain_store(self, *args)
    def _import(self, *args): return _bitcoin.leveldb_blockchain__import(self, *args)
    def fetch_block_header(self, *args): return _bitcoin.leveldb_blockchain_fetch_block_header(self, *args)
    def fetch_block_transaction_hashes(self, *args): return _bitcoin.leveldb_blockchain_fetch_block_transaction_hashes(self, *args)
    def fetch_block_depth(self, *args): return _bitcoin.leveldb_blockchain_fetch_block_depth(self, *args)
    def fetch_last_depth(self, *args): return _bitcoin.leveldb_blockchain_fetch_last_depth(self, *args)
    def fetch_transaction(self, *args): return _bitcoin.leveldb_blockchain_fetch_transaction(self, *args)
    def fetch_transaction_index(self, *args): return _bitcoin.leveldb_blockchain_fetch_transaction_index(self, *args)
    def fetch_spend(self, *args): return _bitcoin.leveldb_blockchain_fetch_spend(self, *args)
    def fetch_outputs(self, *args): return _bitcoin.leveldb_blockchain_fetch_outputs(self, *args)
    def subscribe_reorganize(self, *args): return _bitcoin.leveldb_blockchain_subscribe_reorganize(self, *args)
leveldb_blockchain_swigregister = _bitcoin.leveldb_blockchain_swigregister
leveldb_blockchain_swigregister(leveldb_blockchain)

def fetch_block(*args):
  return _bitcoin.fetch_block(*args)
fetch_block = _bitcoin.fetch_block


def generate_merkle_root(*args):
  return _bitcoin.generate_merkle_root(*args)
generate_merkle_root = _bitcoin.generate_merkle_root

def previous_output_is_null(*args):
  return _bitcoin.previous_output_is_null(*args)
previous_output_is_null = _bitcoin.previous_output_is_null

def is_coinbase(*args):
  return _bitcoin.is_coinbase(*args)
is_coinbase = _bitcoin.is_coinbase

def total_output_value(*args):
  return _bitcoin.total_output_value(*args)
total_output_value = _bitcoin.total_output_value

def __ne__(*args):
  return _bitcoin.__ne__(*args)
__ne__ = _bitcoin.__ne__

def is_final(*args):
  return _bitcoin.is_final(*args)
is_final = _bitcoin.is_final
class transaction_entry_info(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hash = _swig_property(_bitcoin.transaction_entry_info_hash_get, _bitcoin.transaction_entry_info_hash_set)
    tx = _swig_property(_bitcoin.transaction_entry_info_tx_get, _bitcoin.transaction_entry_info_tx_set)
    handle_confirm = _swig_property(_bitcoin.transaction_entry_info_handle_confirm_get, _bitcoin.transaction_entry_info_handle_confirm_set)
    def __init__(self): 
        this = _bitcoin.new_transaction_entry_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_transaction_entry_info
    __del__ = lambda self : None;
transaction_entry_info_swigregister = _bitcoin.transaction_entry_info_swigregister
transaction_entry_info_swigregister(transaction_entry_info)

def hash_transaction(*args):
  return _bitcoin.hash_transaction(*args)
hash_transaction = _bitcoin.hash_transaction

def pretty(*args):
  return _bitcoin.pretty(*args)
pretty = _bitcoin.pretty

def __eq__(*args):
  return _bitcoin.__eq__(*args)
__eq__ = _bitcoin.__eq__

class transaction_pool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_transaction_pool(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self): return _bitcoin.transaction_pool_start(self)
    def store(self, *args): return _bitcoin.transaction_pool_store(self, *args)
    def fetch(self, *args): return _bitcoin.transaction_pool_fetch(self, *args)
    def exists(self, *args): return _bitcoin.transaction_pool_exists(self, *args)
    __swig_destroy__ = _bitcoin.delete_transaction_pool
    __del__ = lambda self : None;
transaction_pool_swigregister = _bitcoin.transaction_pool_swigregister
transaction_pool_swigregister(transaction_pool)

class poller(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_poller(*args)
        try: self.this.append(this)
        except: self.this = this
    def query(self, *args): return _bitcoin.poller_query(self, *args)
    def monitor(self, *args): return _bitcoin.poller_monitor(self, *args)
    __swig_destroy__ = _bitcoin.delete_poller
    __del__ = lambda self : None;
poller_swigregister = _bitcoin.poller_swigregister
poller_swigregister(poller)

class session_params(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _bitcoin.delete_session_params
    __del__ = lambda self : None;
session_params_swigregister = _bitcoin.session_params_swigregister
session_params_swigregister(session_params)

class session(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _bitcoin.new_session(*args)
        try: self.this.append(this)
        except: self.this = this
    def start(self, *args): return _bitcoin.session_start(self, *args)
    def stop(self, *args): return _bitcoin.session_stop(self, *args)
    __swig_destroy__ = _bitcoin.delete_session
    __del__ = lambda self : None;
session_swigregister = _bitcoin.session_swigregister
session_swigregister(session)


def create_session_params(*args):
  return _bitcoin.create_session_params(*args)
create_session_params = _bitcoin.create_session_params
class deterministic_wallet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def new_seed(self): return _bitcoin.deterministic_wallet_new_seed(self)
    def set_seed(self, *args): return _bitcoin.deterministic_wallet_set_seed(self, *args)
    def seed(self): return _bitcoin.deterministic_wallet_seed(self)
    def set_master_public_key(self, *args): return _bitcoin.deterministic_wallet_set_master_public_key(self, *args)
    def master_public_key(self): return _bitcoin.deterministic_wallet_master_public_key(self)
    def generate_public_key(self, *args): return _bitcoin.deterministic_wallet_generate_public_key(self, *args)
    def generate_secret(self, *args): return _bitcoin.deterministic_wallet_generate_secret(self, *args)
    def __init__(self): 
        this = _bitcoin.new_deterministic_wallet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _bitcoin.delete_deterministic_wallet
    __del__ = lambda self : None;
deterministic_wallet_swigregister = _bitcoin.deterministic_wallet_swigregister
deterministic_wallet_swigregister(deterministic_wallet)



